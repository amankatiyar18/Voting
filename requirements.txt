fastapi
uvicorn
sqlalchemy
mysql-connector-python
pydantic
python-dotenv


# pip install -r requirements.txt


#    @classmethod
#     def get_results_by_year(cls, year_input: str):
#         engine = get_engine()
#         Session = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
#         with Session() as session:
#             try:
#                 if '-' in year_input:
#                     start_year, end_year = map(int, year_input.split('-'))
#                     results = session.query(VoteModel).filter(
#                         and_(
#                             extract('year', VoteModel.vote_time) >= start_year,
#                             extract('year', VoteModel.vote_time) <= end_year
#                         )
#                     ).all()
#                 else:
#                     year = int(year_input)
#                     results = session.query(VoteModel).filter(
#                         extract('year', VoteModel.vote_time) == year
#                     ).all()

                
#                 return [result.to_dict() for result in results]
#             except Exception as e:
#                 raise HTTPException(status_code=500, detail=f"An error occurred while fetching results: {str(e)}")



# @app.get("/results/{year_input}", response_model=List[Result], tags=["Results"])
# def read_results(year_input: str):
#     return ResultModel.get(year_input)

# pip install python-dotenv passlib[bcrypt] python-jose




# security = HTTPBasic()

# # Create an instance of AuthMixing
# auth_mixing = AuthMixing()

# # Dependencies
# def authenticate_user(username: str, password: str):
#     user = auth_mixing.authenticate_user(username, password)
#     if user is None:
#         raise HTTPException(
#             status_code=status.HTTP_401_UNAUTHORIZED,
#             detail="Invalid credentials",
#             headers={"WWW-Authenticate": "Basic"},
#         )
#     return user

# def get_session_id(request: Request):
#     session_id = request.cookies.get("session_id")
#     if session_id is None or session_id not in Session:
#         raise HTTPException(status_code=401, detail="Invalid session ID")
#     return int(session_id)

# def get_current_user(session_id: int = Depends(get_session_id)):
#     user_id = Session.get(session_id)
#     if user_id is None:
#         raise HTTPException(status_code=401, detail="Unauthorized")
#     return user_id

# class Login(BaseModel):
#     username: str
#     password: str

# @app.post("/login", response_model=Login)
# def login(login: Login):
#     try:
#         user = authenticate_user(login.username, login.password)
#         if not user:
#             raise HTTPException(
#                 status_code=status.HTTP_401_UNAUTHORIZED,
#                 detail="Invalid credentials",
#                 headers={"WWW-Authenticate": "Basic"},
#             )
#         session_id = auth_mixing.create_session(user.id)
#         return {"message": "Logged in successfully", "session_id": session_id}
#     except HTTPException as e:
#         raise e
#     except Exception as e:
#         print(f"Unexpected error occurred: {e}")
#         raise HTTPException(status_code=500, detail="Internal Server Error")

# @app.post("/logout")
# def logout(session_id: int = Depends(get_session_id)):
#     if session_id not in Session:
#         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Session not found")
#     Session.pop(session_id)
#     return {"message": "Logged out successfully", "session_id": session_id}
